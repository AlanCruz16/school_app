generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model SchoolYear {
  id             String          @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  active         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  grades         Grade[]
  payments       Payment[]
  receiptCounter ReceiptCounter?
}

model Grade {
  id            String     @id @default(uuid())
  name          String
  tuitionAmount Decimal    @db.Decimal(10, 2)
  schoolYearId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  schoolYear    SchoolYear @relation(fields: [schoolYearId], references: [id])
  students      Student[]
}

model Tutor {
  id        String    @id @default(uuid())
  name      String
  phone     String
  email     String
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
}

model Student {
  id        String    @id @default(uuid())
  name      String
  gradeId   String
  tutorId   String
  active    Boolean   @default(true)
  balance   Decimal   @default(0.00) @db.Decimal(10, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]
  grade     Grade     @relation(fields: [gradeId], references: [id])
  tutor     Tutor     @relation(fields: [tutorId], references: [id])
}

model Payment {
  id            String        @id @default(uuid())
  studentId     String
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  forMonth      Int
  schoolYearId  String
  clerkId       String
  receiptNumber String
  isPartial     Boolean       @default(false)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  forYear       Int           @default(2025)
  transactionId String
  clerk         User          @relation(fields: [clerkId], references: [id])
  schoolYear    SchoolYear    @relation(fields: [schoolYearId], references: [id])
  student       Student       @relation(fields: [studentId], references: [id])

  @@index([transactionId])
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  role      String    @default("clerk")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]
}

model ReceiptCounter {
  id           String     @id @default(uuid())
  schoolYearId String     @unique
  lastNumber   Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
}

enum PaymentMethod {
  CASH
  CARD
  EFECTIVO
  CHEQUE_NOMINATIVO
  TRANSFERENCIA
  TARJETA_CREDITO
  TARJETA_DEBITO
}
