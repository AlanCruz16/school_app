// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model SchoolYear {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  active    Boolean  @default(false)
  
  grades    Grade[]
  payments  Payment[]
  receiptCounter ReceiptCounter?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id             String     @id @default(uuid())
  name           String
  tuitionAmount  Decimal    @db.Decimal(10, 2)
  schoolYear     SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId   String
  
  students       Student[]
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Tutor {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String
  address   String?
  
  students  Student[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String   @id @default(uuid())
  name      String
  grade     Grade    @relation(fields: [gradeId], references: [id])
  gradeId   String
  tutor     Tutor    @relation(fields: [tutorId], references: [id])
  tutorId   String
  active    Boolean  @default(true)
  balance   Decimal  @default(0.00) @db.Decimal(10, 2)
  
  payments  Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String     @id @default(uuid())
  student       Student    @relation(fields: [studentId], references: [id])
  studentId     String
  amount        Decimal    @db.Decimal(10, 2)
  paymentDate   DateTime   @default(now())
  paymentMethod PaymentMethod
  forMonth      Int        // 1-12 representing Jan-Dec
  forYear       Int        @default(2025) // Add this new field with a default (current year)
  schoolYear    SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId  String
  clerk         User       @relation(fields: [clerkId], references: [id])
  clerkId       String
  receiptNumber String     // Removed @unique constraint
  isPartial     Boolean    @default(false)
  notes         String?
  transactionId String     // Made non-nullable
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([transactionId]) // Added index for transaction grouping
}

enum PaymentMethod {
  CASH              // Keep for legacy data
  CARD              // Keep for legacy data
  EFECTIVO          // 01 Efectivo
  CHEQUE_NOMINATIVO // 02 Cheque nominativo
  TRANSFERENCIA     // 03 Transferencia electrónica de fondos
  TARJETA_CREDITO   // 04 Tarjeta de crédito
  TARJETA_DEBITO    // 28 Tarjeta de débito
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  role      String    @default("clerk")
  
  payments  Payment[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

//for the receipt consecutive serial
model ReceiptCounter {
  id           String   @id @default(uuid())
  schoolYearId String   @unique  // One counter per school year
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  lastNumber   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
